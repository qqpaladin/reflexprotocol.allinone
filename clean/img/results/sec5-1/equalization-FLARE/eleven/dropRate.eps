%!PS-Adobe-2.0 EPSF-2.0
%%Title: dropRate.eps
%%Creator: gnuplot 4.0 patchlevel 0
%%CreationDate: Wed Sep  1 22:41:33 2010
%%DocumentFonts: (atend)
%%BoundingBox: 50 50 410 302
%%Orientation: Portrait
%%EndComments
/gnudict 256 dict def
gnudict begin
/Color true def
/Solid false def
/gnulinewidth 5.000 def
/userlinewidth gnulinewidth def
/vshift -46 def
/dl {10.0 mul} def
/hpt_ 31.5 def
/vpt_ 31.5 def
/hpt hpt_ def
/vpt vpt_ def
/Rounded false def
/M {moveto} bind def
/L {lineto} bind def
/R {rmoveto} bind def
/V {rlineto} bind def
/N {newpath moveto} bind def
/C {setrgbcolor} bind def
/f {rlineto fill} bind def
/vpt2 vpt 2 mul def
/hpt2 hpt 2 mul def
/Lshow { currentpoint stroke M
  0 vshift R show } def
/Rshow { currentpoint stroke M
  dup stringwidth pop neg vshift R show } def
/Cshow { currentpoint stroke M
  dup stringwidth pop -2 div vshift R show } def
/UP { dup vpt_ mul /vpt exch def hpt_ mul /hpt exch def
  /hpt2 hpt 2 mul def /vpt2 vpt 2 mul def } def
/DL { Color {setrgbcolor Solid {pop []} if 0 setdash }
 {pop pop pop 0 setgray Solid {pop []} if 0 setdash} ifelse } def
/BL { stroke userlinewidth 2 mul setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/AL { stroke userlinewidth 2 div setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/UL { dup gnulinewidth mul /userlinewidth exch def
      dup 1 lt {pop 1} if 10 mul /udl exch def } def
/PL { stroke userlinewidth setlinewidth
      Rounded { 1 setlinejoin 1 setlinecap } if } def
/LTw { PL [] 1 setgray } def
/LTb { BL [] 0 0 0 DL } def
/LTa { AL [1 udl mul 2 udl mul] 0 setdash 0 0 0 setrgbcolor } def
/LT0 { PL [] 1 0 0 DL } def
/LT1 { PL [4 dl 2 dl] 0 1 0 DL } def
/LT2 { PL [2 dl 3 dl] 0 0 1 DL } def
/LT3 { PL [1 dl 1.5 dl] 1 0 1 DL } def
/LT4 { PL [5 dl 2 dl 1 dl 2 dl] 0 1 1 DL } def
/LT5 { PL [4 dl 3 dl 1 dl 3 dl] 1 1 0 DL } def
/LT6 { PL [2 dl 2 dl 2 dl 4 dl] 0 0 0 DL } def
/LT7 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 1 0.3 0 DL } def
/LT8 { PL [2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 2 dl 4 dl] 0.5 0.5 0.5 DL } def
/Pnt { stroke [] 0 setdash
   gsave 1 setlinecap M 0 0 V stroke grestore } def
/Dia { stroke [] 0 setdash 2 copy vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke
  Pnt } def
/Pls { stroke [] 0 setdash vpt sub M 0 vpt2 V
  currentpoint stroke M
  hpt neg vpt neg R hpt2 0 V stroke
  } def
/Box { stroke [] 0 setdash 2 copy exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke
  Pnt } def
/Crs { stroke [] 0 setdash exch hpt sub exch vpt add M
  hpt2 vpt2 neg V currentpoint stroke M
  hpt2 neg 0 R hpt2 vpt2 V stroke } def
/TriU { stroke [] 0 setdash 2 copy vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke
  Pnt  } def
/Star { 2 copy Pls Crs } def
/BoxF { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V  hpt2 0 V  0 vpt2 V
  hpt2 neg 0 V  closepath fill } def
/TriUF { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath fill } def
/TriD { stroke [] 0 setdash 2 copy vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke
  Pnt  } def
/TriDF { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath fill} def
/DiaF { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath fill } def
/Pent { stroke [] 0 setdash 2 copy gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore Pnt } def
/PentF { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath fill grestore } def
/Circle { stroke [] 0 setdash 2 copy
  hpt 0 360 arc stroke Pnt } def
/CircleF { stroke [] 0 setdash hpt 0 360 arc fill } def
/C0 { BL [] 0 setdash 2 copy moveto vpt 90 450  arc } bind def
/C1 { BL [] 0 setdash 2 copy        moveto
       2 copy  vpt 0 90 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C2 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C3 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C4 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C5 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 90 arc
       2 copy moveto
       2 copy  vpt 180 270 arc closepath fill
               vpt 0 360 arc } bind def
/C6 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 90 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C7 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 0 270 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C8 { BL [] 0 setdash 2 copy moveto
      2 copy vpt 270 360 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C9 { BL [] 0 setdash 2 copy moveto
      2 copy  vpt 270 450 arc closepath fill
              vpt 0 360 arc closepath } bind def
/C10 { BL [] 0 setdash 2 copy 2 copy moveto vpt 270 360 arc closepath fill
       2 copy moveto
       2 copy vpt 90 180 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C11 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 0 180 arc closepath fill
       2 copy moveto
       2 copy  vpt 270 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C12 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C13 { BL [] 0 setdash  2 copy moveto
       2 copy  vpt 0 90 arc closepath fill
       2 copy moveto
       2 copy  vpt 180 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/C14 { BL [] 0 setdash 2 copy moveto
       2 copy  vpt 90 360 arc closepath fill
               vpt 0 360 arc } bind def
/C15 { BL [] 0 setdash 2 copy vpt 0 360 arc closepath fill
               vpt 0 360 arc closepath } bind def
/Rec   { newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
       neg 0 rlineto closepath } bind def
/Square { dup Rec } bind def
/Bsquare { vpt sub exch vpt sub exch vpt2 Square } bind def
/S0 { BL [] 0 setdash 2 copy moveto 0 vpt rlineto BL Bsquare } bind def
/S1 { BL [] 0 setdash 2 copy vpt Square fill Bsquare } bind def
/S2 { BL [] 0 setdash 2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S3 { BL [] 0 setdash 2 copy exch vpt sub exch vpt2 vpt Rec fill Bsquare } bind def
/S4 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S5 { BL [] 0 setdash 2 copy 2 copy vpt Square fill
       exch vpt sub exch vpt sub vpt Square fill Bsquare } bind def
/S6 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S7 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt vpt2 Rec fill
       2 copy vpt Square fill
       Bsquare } bind def
/S8 { BL [] 0 setdash 2 copy vpt sub vpt Square fill Bsquare } bind def
/S9 { BL [] 0 setdash 2 copy vpt sub vpt vpt2 Rec fill Bsquare } bind def
/S10 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt Square fill
       Bsquare } bind def
/S11 { BL [] 0 setdash 2 copy vpt sub vpt Square fill 2 copy exch vpt sub exch vpt2 vpt Rec fill
       Bsquare } bind def
/S12 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill Bsquare } bind def
/S13 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy vpt Square fill Bsquare } bind def
/S14 { BL [] 0 setdash 2 copy exch vpt sub exch vpt sub vpt2 vpt Rec fill
       2 copy exch vpt sub exch vpt Square fill Bsquare } bind def
/S15 { BL [] 0 setdash 2 copy Bsquare fill Bsquare } bind def
/D0 { gsave translate 45 rotate 0 0 S0 stroke grestore } bind def
/D1 { gsave translate 45 rotate 0 0 S1 stroke grestore } bind def
/D2 { gsave translate 45 rotate 0 0 S2 stroke grestore } bind def
/D3 { gsave translate 45 rotate 0 0 S3 stroke grestore } bind def
/D4 { gsave translate 45 rotate 0 0 S4 stroke grestore } bind def
/D5 { gsave translate 45 rotate 0 0 S5 stroke grestore } bind def
/D6 { gsave translate 45 rotate 0 0 S6 stroke grestore } bind def
/D7 { gsave translate 45 rotate 0 0 S7 stroke grestore } bind def
/D8 { gsave translate 45 rotate 0 0 S8 stroke grestore } bind def
/D9 { gsave translate 45 rotate 0 0 S9 stroke grestore } bind def
/D10 { gsave translate 45 rotate 0 0 S10 stroke grestore } bind def
/D11 { gsave translate 45 rotate 0 0 S11 stroke grestore } bind def
/D12 { gsave translate 45 rotate 0 0 S12 stroke grestore } bind def
/D13 { gsave translate 45 rotate 0 0 S13 stroke grestore } bind def
/D14 { gsave translate 45 rotate 0 0 S14 stroke grestore } bind def
/D15 { gsave translate 45 rotate 0 0 S15 stroke grestore } bind def
/DiaE { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V closepath stroke } def
/BoxE { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V closepath stroke } def
/TriUE { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V closepath stroke } def
/TriDE { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V closepath stroke } def
/PentE { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  closepath stroke grestore } def
/CircE { stroke [] 0 setdash 
  hpt 0 360 arc stroke } def
/Opaque { gsave closepath 1 setgray fill grestore 0 setgray closepath } def
/DiaW { stroke [] 0 setdash vpt add M
  hpt neg vpt neg V hpt vpt neg V
  hpt vpt V hpt neg vpt V Opaque stroke } def
/BoxW { stroke [] 0 setdash exch hpt sub exch vpt add M
  0 vpt2 neg V hpt2 0 V 0 vpt2 V
  hpt2 neg 0 V Opaque stroke } def
/TriUW { stroke [] 0 setdash vpt 1.12 mul add M
  hpt neg vpt -1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt 1.62 mul V Opaque stroke } def
/TriDW { stroke [] 0 setdash vpt 1.12 mul sub M
  hpt neg vpt 1.62 mul V
  hpt 2 mul 0 V
  hpt neg vpt -1.62 mul V Opaque stroke } def
/PentW { stroke [] 0 setdash gsave
  translate 0 hpt M 4 {72 rotate 0 hpt L} repeat
  Opaque stroke grestore } def
/CircW { stroke [] 0 setdash 
  hpt 0 360 arc Opaque stroke } def
/BoxFill { gsave Rec 1 setgray fill grestore } def
/BoxColFill {
  gsave Rec
  /Fillden exch def
  currentrgbcolor
  /ColB exch def /ColG exch def /ColR exch def
  /ColR ColR Fillden mul Fillden sub 1 add def
  /ColG ColG Fillden mul Fillden sub 1 add def
  /ColB ColB Fillden mul Fillden sub 1 add def
  ColR ColG ColB setrgbcolor
  fill grestore } def
%
% PostScript Level 1 Pattern Fill routine
% Usage: x y w h s a XX PatternFill
%	x,y = lower left corner of box to be filled
%	w,h = width and height of box
%	  a = angle in degrees between lines and x-axis
%	 XX = 0/1 for no/yes cross-hatch
%
/PatternFill { gsave /PFa [ 9 2 roll ] def
    PFa 0 get PFa 2 get 2 div add PFa 1 get PFa 3 get 2 div add translate
    PFa 2 get -2 div PFa 3 get -2 div PFa 2 get PFa 3 get Rec
    gsave 1 setgray fill grestore clip
    currentlinewidth 0.5 mul setlinewidth
    /PFs PFa 2 get dup mul PFa 3 get dup mul add sqrt def
    0 0 M PFa 5 get rotate PFs -2 div dup translate
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 M 0 PFs V } for
    0 PFa 6 get ne {
	0 1 PFs PFa 4 get div 1 add floor cvi
	{ PFa 4 get mul 0 2 1 roll M PFs 0 V } for
    } if
    stroke grestore } def
%
/Symbol-Oblique /Symbol findfont [1 0 .167 1 0 0] makefont
dup length dict begin {1 index /FID eq {pop pop} {def} ifelse} forall
currentdict end definefont pop
/MFshow {
   { dup 5 get 3 ge
     { 5 get 3 eq {gsave} {grestore} ifelse }
     {dup dup 0 get findfont exch 1 get scalefont setfont
     [ currentpoint ] exch dup 2 get 0 exch R dup 5 get 2 ne {dup dup 6
     get exch 4 get {show} {stringwidth pop 0 R} ifelse }if dup 5 get 0 eq
     {dup 3 get {2 get neg 0 exch R pop} {pop aload pop M} ifelse} {dup 5
     get 1 eq {dup 2 get exch dup 3 get exch 6 get stringwidth pop -2 div
     dup 0 R} {dup 6 get stringwidth pop -2 div 0 R 6 get
     show 2 index {aload pop M neg 3 -1 roll neg R pop pop} {pop pop pop
     pop aload pop M} ifelse }ifelse }ifelse }
     ifelse }
   forall} bind def
/MFwidth {0 exch {dup 3 get{dup dup 0 get findfont exch 1 get scalefont
     setfont 6 get stringwidth pop add} {pop} ifelse} forall} bind def
/MLshow { currentpoint stroke M
  0 exch R MFshow } bind def
/MRshow { currentpoint stroke M
  exch dup MFwidth neg 3 -1 roll R MFshow } def
/MCshow { currentpoint stroke M
  exch dup MFwidth -2 div 3 -1 roll R MFshow } def
end
%%EndProlog
gnudict begin
gsave
50 50 translate
0.050 0.050 scale
0 setgray
newpath
(Helvetica) findfont 140 scalefont setfont
1.000 UL
LTb
658 280 M
63 0 V
6241 0 R
-63 0 V
stroke
574 280 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0)]
] -46.7 MRshow
1.000 UL
LTb
658 790 M
63 0 V
6241 0 R
-63 0 V
stroke
574 790 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.01)]
] -46.7 MRshow
1.000 UL
LTb
658 1300 M
63 0 V
6241 0 R
-63 0 V
stroke
574 1300 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.02)]
] -46.7 MRshow
1.000 UL
LTb
658 1811 M
63 0 V
6241 0 R
-63 0 V
stroke
574 1811 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.03)]
] -46.7 MRshow
1.000 UL
LTb
658 2321 M
63 0 V
6241 0 R
-63 0 V
stroke
574 2321 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.04)]
] -46.7 MRshow
1.000 UL
LTb
658 2831 M
63 0 V
6241 0 R
-63 0 V
stroke
574 2831 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.05)]
] -46.7 MRshow
1.000 UL
LTb
658 3341 M
63 0 V
6241 0 R
-63 0 V
stroke
574 3341 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.06)]
] -46.7 MRshow
1.000 UL
LTb
658 3852 M
63 0 V
6241 0 R
-63 0 V
stroke
574 3852 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.07)]
] -46.7 MRshow
1.000 UL
LTb
658 4362 M
63 0 V
6241 0 R
-63 0 V
stroke
574 4362 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.08)]
] -46.7 MRshow
1.000 UL
LTb
658 4872 M
63 0 V
6241 0 R
-63 0 V
stroke
574 4872 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0.09)]
] -46.7 MRshow
1.000 UL
LTb
658 280 M
0 63 V
0 4529 R
0 -63 V
stroke
658 140 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 0)]
] -46.7 MCshow
1.000 UL
LTb
1709 280 M
0 63 V
0 4529 R
0 -63 V
stroke
1709 140 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 100)]
] -46.7 MCshow
1.000 UL
LTb
2759 280 M
0 63 V
0 4529 R
0 -63 V
stroke
2759 140 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 200)]
] -46.7 MCshow
1.000 UL
LTb
3810 280 M
0 63 V
0 4529 R
0 -63 V
stroke
3810 140 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 300)]
] -46.7 MCshow
1.000 UL
LTb
4861 280 M
0 63 V
0 4529 R
0 -63 V
stroke
4861 140 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 400)]
] -46.7 MCshow
1.000 UL
LTb
5911 280 M
0 63 V
0 4529 R
0 -63 V
stroke
5911 140 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 500)]
] -46.7 MCshow
1.000 UL
LTb
6962 280 M
0 63 V
0 4529 R
0 -63 V
stroke
6962 140 M
[ [(Helvetica) 140.0 0.0 true true 0 ( 600)]
] -46.7 MCshow
1.000 UL
LTb
1.000 UL
LTb
658 280 M
6304 0 V
0 4592 V
-6304 0 V
658 280 L
1.000 UP
3.000 UL
LT0
LTb
6311 4739 M
[ [(Helvetica) 140.0 0.0 true true 0 (Dropping Rate at Link 1 )]
] -46.7 MRshow
LT0
6395 4739 M
399 0 V
688 297 M
64 1492 V
63 -460 V
64 64 V
63 -203 V
63 28 V
64 141 V
63 -156 V
63 -29 V
64 40 V
63 2 V
63 -130 V
64 -37 V
63 109 V
63 131 V
64 2 V
63 -194 V
64 128 V
63 -51 V
63 -13 V
64 6 V
63 37 V
63 -13 V
64 -52 V
63 -46 V
63 44 V
64 36 V
63 17 V
64 -53 V
63 33 V
63 -35 V
64 -7 V
63 204 V
63 -57 V
64 -57 V
63 -28 V
63 58 V
64 44 V
63 -58 V
63 -35 V
64 -37 V
63 50 V
64 69 V
63 -38 V
63 -36 V
64 25 V
63 41 V
63 -31 V
64 76 V
63 120 V
63 432 V
64 80 V
63 -135 V
63 -2 V
64 -13 V
63 -22 V
64 -58 V
63 -78 V
63 119 V
64 -11 V
63 -65 V
63 28 V
64 39 V
63 23 V
63 46 V
64 74 V
63 -98 V
63 32 V
64 69 V
63 -63 V
64 -118 V
63 -11 V
63 109 V
64 1 V
63 -184 V
63 37 V
64 60 V
63 -36 V
63 -10 V
64 1 V
63 46 V
63 75 V
64 127 V
63 -16 V
64 -67 V
63 -91 V
63 -53 V
64 89 V
63 -4 V
63 -71 V
64 -14 V
63 38 V
63 83 V
64 -204 V
63 173 V
64 -46 V
63 -73 V
63 160 V
64 -85 V
63 120 V
3.000 UL
LT1
LTb
6311 4599 M
[ [(Helvetica) 140.0 0.0 true true 0 (Dropping Rate at Link 2)]
] -46.7 MRshow
LT1
6395 4599 M
399 0 V
686 740 M
64 925 V
63 -51 V
64 -385 V
63 56 V
63 -20 V
64 -123 V
63 126 V
63 28 V
64 10 V
63 -89 V
64 129 V
63 -39 V
63 -47 V
64 -30 V
63 -31 V
63 -16 V
64 44 V
63 194 V
64 -187 V
63 -30 V
63 0 V
64 -85 V
63 -43 V
63 16 V
64 149 V
63 -12 V
64 40 V
63 -67 V
63 31 V
64 -49 V
63 -89 V
64 146 V
63 104 V
63 -108 V
64 -84 V
63 83 V
63 62 V
64 -63 V
63 -6 V
64 -104 V
63 -10 V
63 -61 V
64 -48 V
63 -26 V
63 118 V
64 149 V
63 37 V
64 -84 V
63 113 V
63 531 V
64 153 V
63 -121 V
63 14 V
64 -12 V
63 -47 V
64 -99 V
63 -93 V
63 103 V
64 -7 V
63 -41 V
64 65 V
63 -21 V
63 1 V
64 69 V
63 91 V
63 -129 V
64 -20 V
63 -5 V
64 -5 V
63 -47 V
63 80 V
64 19 V
63 -61 V
63 -5 V
64 3 V
63 99 V
64 -50 V
63 -51 V
63 -1 V
64 22 V
63 14 V
63 158 V
64 -108 V
63 9 V
64 -37 V
63 68 V
63 -77 V
64 -65 V
63 -3 V
64 82 V
63 10 V
63 3 V
64 -105 V
63 33 V
63 -94 V
64 63 V
63 141 V
64 -129 V
63 127 V
3.000 UL
LT2
LTb
6311 4459 M
[ [(Helvetica) 140.0 0.0 true true 0 (Dropping Rate at Link 3)]
] -46.7 MRshow
LT2
6395 4459 M
399 0 V
686 1029 M
64 572 V
63 37 V
64 -429 V
63 -23 V
63 150 V
64 -98 V
63 126 V
63 -145 V
64 144 V
63 -83 V
64 43 V
63 -57 V
63 8 V
64 -69 V
63 80 V
63 -17 V
64 -73 V
63 -6 V
64 -28 V
63 23 V
63 0 V
64 7 V
63 -42 V
63 -41 V
64 30 V
63 -33 V
64 80 V
63 -9 V
63 -61 V
64 121 V
63 37 V
64 -33 V
63 -58 V
63 -57 V
64 -9 V
63 -3 V
63 49 V
64 -97 V
63 -52 V
64 148 V
63 -22 V
63 72 V
64 -64 V
63 -54 V
63 93 V
64 31 V
63 -73 V
64 -8 V
63 174 V
63 489 V
64 110 V
63 -74 V
63 19 V
64 -40 V
63 24 V
64 -60 V
63 -47 V
63 -19 V
64 21 V
63 20 V
64 -24 V
63 -26 V
63 48 V
64 18 V
63 29 V
63 -27 V
64 46 V
63 14 V
64 -41 V
63 -44 V
63 17 V
64 33 V
63 -4 V
63 -26 V
64 18 V
63 36 V
64 -40 V
63 -51 V
63 -52 V
64 66 V
63 -14 V
63 116 V
64 -36 V
63 25 V
64 -27 V
63 25 V
63 -118 V
64 90 V
63 -48 V
64 85 V
63 -36 V
63 -77 V
64 -47 V
63 92 V
63 -89 V
64 -14 V
63 78 V
64 23 V
63 121 V
1.000 UL
LTb
658 280 M
6304 0 V
0 4592 V
-6304 0 V
658 280 L
1.000 UP
stroke
grestore
end
showpage
%%Trailer
%%DocumentFonts: Helvetica
